plugins {
    id 'java'
    id 'jacoco'
    id 'org.springframework.boot' version '2.4.3'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
}

apply plugin: 'java'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'

version = '1.0.0'
sourceCompatibility = JavaVersion.VERSION_1_8

repositories {
    mavenCentral()
}

dependencies {
    annotationProcessor(
            'org.springframework.boot:spring-boot-configuration-processor',
            'org.projectlombok:lombok'
    )

    implementation(
            'org.springframework.boot:spring-boot-starter-data-jpa',
    )

    compileOnly(
            'org.projectlombok:lombok'
    )

    runtimeOnly(
            'com.h2database:h2'
    )

    testImplementation(
            'org.springframework.boot:spring-boot-starter-test'
    )

    testImplementation("org.springframework.boot:spring-boot-starter-test") {
        exclude group: "junit", module: "junit"
    }
}

test {
    useJUnitPlatform()
}

gradle.projectsEvaluated {
    tasks.withType(JavaCompile) {
        options.compilerArgs << "-Xlint:unchecked"
    }
}

build {
    dependsOn(':jacoco')
}

ext {
    set('reportDir', file('src/report'))
    excludeFilter = [
            '**/Q*.*',
            '**/exception/**',
            '**/test/**',
    ]
}

task jacoco(type: Test) {
    group 'verification'
    description 'Runs the unit tests and verify coverage using jacoco'


    dependsOn(
            ':jacocoTestReport',
            ':jacocoTestCoverageVerification'
    )

    tasks['jacocoTestCoverageVerification'].mustRunAfter(tasks['jacocoTestReport'])
}

jacocoTestReport {
    reports {
        html.enabled true
        html.destination file("$reportDir/")
    }

    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: excludeFilter)
        }))
    }
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            element = 'CLASS'

            limit {
                counter = 'LINE'
                value = 'TOTALCOUNT'
                maximum = 250
            }
            excludes = excludeFilter
        }
    }
}
