package bowling;

import bowling.domain.Pinfall;
import bowling.domain.PointSymbol;
import bowling.domain.Score;
import bowling.domain.state.*;
import org.assertj.core.api.AssertionsForClassTypes;
import org.junit.jupiter.api.Test;

import java.util.Arrays;
import java.util.List;

import static org.assertj.core.api.AssertionsForClassTypes.assertThatExceptionOfType;
import static org.assertj.core.api.AssertionsForInterfaceTypes.assertThat;


public class FrameStateOpenTest {
    private final List<Pinfall> openPinfalls = Arrays.asList(new Pinfall(1), new Pinfall(2));

    @Test
    void When_Roll_Then_Exception() {
        FrameState state = new FrameStateOpen();
        assertThatExceptionOfType(IllegalArgumentException.class)
                .isThrownBy(() -> state.roll(new Pinfall(9)))
                .withMessage("공을 굴릴 수 없습니다");
    }

    @Test
    void When_isRollable_Then_False() {
        FrameState state = new FrameStateOpen();
        assertThat(state.isRollable()).isFalse();
    }

    @Test
    void When_Symbol_Then_RightSymbol() {
        FrameState state = new FrameStateOpen(openPinfalls);
        assertThat(state.pointSymbols().symbols()).containsAll(Arrays.asList(PointSymbol.ONE, PointSymbol.TWO));
    }

    @Test
    void When_Score_Then_NotDetermined() {
        AssertionsForClassTypes.assertThat(new FrameStateOpen(openPinfalls).score()).isEqualTo(Score.create(3));
    }

    @Test
    void When_Pinfalls_Then_Pinfalsl() {
        assertThat(new FrameStateOpen(openPinfalls).pinfalls()).isEqualTo(openPinfalls);
    }
}
